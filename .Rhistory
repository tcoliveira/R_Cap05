df_sono%>%
summarise(media_sono = mean(sono_total))
df_sono%>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total))
df_sono%>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total=n())
#group_by
df_sono%>%
group_by(cidade)%>%
summarise(avg_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total=n())
#instalando o pacote hflights() --- dados de voos do aeroporto de houston
install.packages('hflights')
library(hflights)
flights<-tbl_df(hflights)
flights
data.frame(flights)
install.packages('tidyr')
library(tidyr)
#Criando Dados
df <- data.frame(
nome = c("Game Of Thrones", "Mr. Robot", "Silicon Valley"),
regiaoA = c(97, 80, 84),
regiaoB= c(86, 90, 91)
)
df
df%>%
gather(Regiao, NotaFinal, regiaoA:regiaoB) ##tidyr:gather ---- remodelagem dos dados
#criando dados
set.seed(10)
df2<-data.frame(
id =1:4,
acao = sample(rep(c('controle', 'tratamento'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
df2
#Reshape 1
df2_organizado1<-df2%<%
gather(key, time, -id, -acao)
#Reshape 1
df2_organizado1<-df2%>%
gather(key, time, -id, -acao)
df2_organizado1
df2<-data.frame(
id =1:4,
acao = sample(rep(c('controle', 'tratamento'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
df2
#Reshape 1
df2_organizado1<-df2%>%
gather(key, time, -id, -acao)
df2_organizado1
df2_organizado1%>% head(8)
df2_organizado2<-df2_organizado1 %>%
separate(key, into = c('localidade', 'tempo'), sep = '\\.')
df2_organizado2%>% head(8)
df3 <- data.frame(
participante = c("p1", "p2", "p3", "p4", "p5", "p6"),
info = c("g1m", "g1m", "g1f", "g2m", "g2m", "g2m"),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8)
)
print(df3)
# Reshape dos dados
df3 %>%
gather(day, score, c(day1score, day2score))
df
df3
df3 %>%
gather(day, score, c(day1score, day2score))
df3
df3 %>%
gather(day, score, c(day1score, day2score))%>%
spread(dau,score)
df3 %>%
gather(day, score, c(day1score, day2score))%>%
spread(day,score)
df3 %>%
gather(day, score, c(day1score, day2score))%>%
separate(col=info, into = c('group', 'gender'), sep =2)
df3 %>%
gather(day, score, c(day1score, day2score))%>%
separate(col=info, into = c('group', 'gender'), sep =2)%>%
unite(infoAgain, group, gender)
df3 %>%
gather(day, score, c(day1score, day2score))%>%
separate(col=info, into = c('group', 'gender'), sep =2)%>%
ggplot(aes(x = day, y =score))+
geom_point() +
facet_wrap(~group) +
geom_smooth(method = 'lm', aes(group = 1), se = F)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
df3 %>%
gather(day, score, c(day1score, day2score))%>%
separate(col=info, into = c('group', 'gender'), sep =2)%>%
ggplot(aes(x = day, y =score))+
geom_point() +
facet_wrap(~group) +
geom_smooth(method = 'lm', aes(group = 1), se = F)
?utils
help = 'utils'
library(help = 'utils')
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = N, qmethod = "double")
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = 'N', qmethod = "double")
#Exercicios cap 04
mtcars
?col.names
??col.names
??col_names
?col_names
write.table(mtcars, file = "mtcars2.txt", sep = "|", colnames = 'N', qmethod = "double")
write.table(mtcars, file = "mtcars2.txt", sep = "|", colnames = N, qmethod = "double")
write.table(mtcars, file = "mtcars2.txt", sep = "|",  qmethod = "double")
help("write.table")
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = TRUE, qmethod = "double")
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris_teste<-read_csv('iris.csv')
head(df_iris_teste)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",
Species = col_factor(c("setosa", "versicolor", "virginica"))
)
?matrix
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double()
))
?Species
??Species
??matrix
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
?matrix
head(df_iris_teste)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double()
))
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = matrix)
?read_csv
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = NULL)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = c)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = i)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv",col_types = NULL)
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
# Exercicio 2  Encontre e faça a correção do erro na instrução abaixo
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df2<- read.xlsx('UrbanPop.xlsx', sheetindex=4)
??read.xlsx
# 3 - Encontre e faça a correção do erro na instrução abaixo:
library('readxl')
df2<- read.xlsx('UrbanPop.xlsx', sheetindex=4)
df2<- read.xlsx('UrbanPop.xlsx', sheetindex=5)
df2<- read.xlsx('UrbanPop.xlsx')
# 3 - Encontre e faça a correção do erro na instrução abaixo:
library('readxl')
# 3 - Encontre e faça a correção do erro na instrução abaixo:
library('xlsx')
df2<- read.xlsx('UrbanPop.xlsx')
df2<- read.xlsx('UrbanPop.xlsx', sheetindex=5)
df2<- read.xlsx('UrbanPop.xlsx', sheetindex=3)
df2<- read.xlsx('UrbanPop.xlsx', sheetIndex=5)
help('xlsx')
sleepData <-
select(df_sono, nome, sono_total)
# Exercicio 4 Encontre e faça a correção do erro na instrução abaixo:
df_sono <-read_csv("sono.csv")
sleepData <-select(df_sono, nome, sono_total)
df_sono %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total)%>%
head
df_sono %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total)%>%
head
head
df3 <-data.frame(
participante = c("p1","p2", "p3", "p4", "p5", "p6"),
info = c("g1m", "g1m", "g1f", "g2m", "g2m", "g2m"),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8))
df3 <-data.frame(
participante = c("p1","p2", "p3", "p4", "p5", "p6"),
info = c("g1m", "g1m", "g1f", "g2m", "g2m", "g2m"),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8))
df3
df3 %>%
gather(day, score, c(day1score, day2score))%>%
separate(col=info, into = c('group', 'gender'), sep =2)%>%
ggplot(aes(x = day, y =score))+
geom_point() +
facet_wrap(~group) +
geom_smooth(method = 'lm', aes(group = 1), se = F)
geom_point() +
facet_wrap(~ group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
set.seed(1)
df3 <-data.frame(
participante = c("p1","p2", "p3", "p4", "p5", "p6"),
info = c("g1m", "g1m", "g1f", "g2m", "g2m", "g2m"),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8))
library(ggplot2)
geom_point() +
facet_wrap(~ group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
geom_point() +
facet_wrap(~group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
geom_point() +
facet_wrap(~group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c("group", "gender"), sep = 2)%>%
ggplot(aes(x = day, y = score))+
geom_point() +
facet_wrap(~group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
df3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c("group", "gender"), sep = 2)%>%
ggplot(aes(x = day, y = score))+
geom_point() +
facet_wrap(~group) +
geom_smooth(method = "lm", aes(group = 1), se = F)
getwd()
#01 - Big data Anaytics
setwd("C:/Users/BI/Documents/Data Science - Curso/RFundamentos_git/R_Cap05")
getwd()
install.packages('quantmod')
install.packages('xts')
install.packages('moments')
library(quantmod)
library(xts)
library(moments)
#Seleção do perio de analise
startDate = as.Date('2016-01-21')
endDate = as.Date('2016-06-21')
#Download dos dados do periodo
?getSymbols
#Seleção do perio de analise
startDate = as.Date('2018-01-21')
#Seleção do perio de analise
startDate = as.Date('2016-01-21')
endDate = as.Date('2016-06-21')
getSymbols('PETR4.SA', src = 'yahoo', from = startDate, to = endDate)
#checando o tipo de dado retornado
class(PETR4.SA)
is.xts(PETR4.SA)
head(PETR4.SA)
PETR4.SA.CLose<- PETR4.SA[,'PETR4.SA.Close']
is.xts(PETR4.SA.CLose)
?Cl
head(Cl(PETR4.SA), 5)
candleChart(PETR4.SA)
plot(PETR4.SA.CLose, main = ' Fechamento diario das ações',
col='red', xlab = 'Data', ylab = 'Preço', major.ticks = 'month')
plot(PETR4.SA.CLose, main = ' Fechamento diario das ações',
col='red', xlab = 'Data', ylab = 'Preço', major.ticks = 'month', minor.ticks = FALSE)
addBBands(n = 20, sd = 2)
addBBands(n = 20, sd = 4)
addBBands(n = 20, sd = 2)
addBBands(n = 10, sd = 2)
# Adicionado as bandas de bollinger ao gráfico, com média de 20 períodos e 2 desvios
# Bollinger Band
# Como o desvio padrão é uma medida de volatilidade,
# Bollinger Bands ajustam-se às condições de mercado. Mercados mais voláteis,
# possuem as bandas mais distantes da média, enquanto mercados menso voláteis possuem as
# bancas mais próximas da média
?addBBands
#Calculando os logs diarios
?log
PETR4.SA.ret<-diff(log(PETR4.SA.CLose), log = 1)
# Remove valores NA na prosição 1
PETR4.SA.ret <- PETR4.SA.ret[-1]
# Plotar a taxa de retorno
plot(PETR4.SA.ret, main = "Fechamento Diário das Ações da Petrobras",
col = "red", xlab = "Data", ylab = "Retorno", major.ticks = 'months',
minor.ticks = FALSE)
statNames<-c('Mean', "std Deviation", 'Skewness', 'Kurtosis')
PETR4.SA.stats<-c(mean(PETR4.SA), std(PETR4.SA),skewness(PETR4.SA),kurtosis(PETR4.SA))
PETR4.SA.stats<-c(mean(PETR4.SA), sd(PETR4.SA),skewness(PETR4.SA),kurtosis(PETR4.SA))
names(PETR4.SA.stats)<-statNames
PETR4.SA.stats
PETR4.SA.stats<-c(mean(PETR4.SA), sd(PETR4.SA),skewness(PETR4.SA),kurtosis(PETR4.SA))
names(PETR4.SA.stats)<-statNames
PETR4.SA.stats
PETR4.SA.stats<-c(mean(PETR4.SA.ret), sd(PETR4.SA.ret),skewness(PETR4.SA.ret),kurtosis(PETR4.SA.ret))
names(PETR4.SA.stats)<-statNames
PETR4.SA.stats
PETR4.SA.stats
#salvando os dados em um arquivo .rds - arquivo binario
getSymbols('PETR4.SA', src = 'yahoo')
#salvando os dados em um arquivo .rds - arquivo binario
getSymbols('PETR4.SA', src = 'yahoo')
saveRDS(PETR4.SA, file = 'PETR4.SA.rds')#Salva os dados em formato rds
Ptr=readRDS('PETR4.SA.rds')
dir()
head(Ptr)
endDate = as.Date(TODAY)
endDate = as.Date(Sys.Date())
getSymbols('PETR4.SA', src = 'yahoo', from = startDate, to = endDate)
plot(PETR4.SA.CLose, main = ' Fechamento diario das ações',
col='red', xlab = 'Data', ylab = 'Preço', major.ticks = 'month', minor.ticks = FALSE)
endDate = as.Date(Sys.Date())
endDate = as.Date(Sys.Date())
endDate# = as.Date(Sys.Date())
getSymbols('PETR4.SA', src = 'yahoo', from = startDate, to = endDate)
head(PETR4.SA)
tail(PETR4.SA)
#Seleção do perio de analise
startDate = as.Date(Sys.Date()-365)
#Seleção do perio de analise
startDate# = as.Date(Sys.Date()-365)
getSymbols('PETR4.SA', src = 'yahoo', from = startDate, to = endDate)
PETR4.SA.CLose<- PETR4.SA[,'PETR4.SA.Close']
PETR4.SA.CLose<- PETR4.SA[,'PETR4.SA.Close']%>%
tail
PETR4.SA.CLose
?Cl
plot(PETR4.SA.CLose, main = ' Fechamento diario das ações',
col='red', xlab = 'Data', ylab = 'Preço', major.ticks = 'month', minor.ticks = FALSE)
PETR4.SA.CLose<- PETR4.SA[,'PETR4.SA.Close']
is.xts(PETR4.SA.CLose)
head(Cl(PETR4.SA), 5)
candleChart(PETR4.SA)
plot(PETR4.SA.CLose, main = ' Fechamento diario das ações',
col='red', xlab = 'Data', ylab = 'Preço', major.ticks = 'month', minor.ticks = FALSE)
addBBands(n = 20, sd = 2)
addBBands(n = 10, sd = 2)
# Plotar a taxa de retorno
plot(PETR4.SA.ret, main = "Fechamento Diário das Ações da Petrobras",
col = "red", xlab = "Data", ylab = "Retorno", major.ticks = 'months',
minor.ticks = FALSE)
# Remove valores NA na prosição 1
PETR4.SA.ret <- PETR4.SA.ret[-1]
# Plotar a taxa de retorno
plot(PETR4.SA.ret, main = "Fechamento Diário das Ações da Petrobras",
col = "red", xlab = "Data", ylab = "Retorno", major.ticks = 'months',
minor.ticks = FALSE)
PETR4.SA.ret<-diff(log(PETR4.SA.CLose), log = 1)
# Remove valores NA na prosição 1
PETR4.SA.ret <- PETR4.SA.ret[-1]
# Plotar a taxa de retorno
plot(PETR4.SA.ret, main = "Fechamento Diário das Ações da Petrobras",
col = "red", xlab = "Data", ylab = "Retorno", major.ticks = 'months',
minor.ticks = FALSE)
getwd()
install.packages('haven')
library(haven)
#Sas
vendas<- read_sas('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/vendas.sas7bdat')
?read_sas
class(vendas)
vendas
str(vendas)
#Stata
df_stata<- read_dta('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/mov.dta')
str(df_stata)
#Convert values in Date column to dates
df_data$Date< - as.Date(as_factor(df_stata))
#Convert values in Date column to dates
df_stata$Date< - as.Date(as_factor(df_stata))
head(df_stata)
#Convert values in Date column to dates
df_stata$Date< - as.Date(as_factor(df_stata))
class(df_stata)
str(df_stata)
#Convert values in Date column to dates
df_stata$Date<- as.Date(as_factor(df_stata))
#Convert values in Date column to dates
df_stata$Date<- as.Date(as_factor(df_stata$Date))
str(df_stata)
plot(df_stata)
#SPSS
df_stata<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
df_stata<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
df_stata<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav', encoding = NULL, user_na =  FALSE)
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav', encoding = NULL, user_na =  FALSE)
#SPSS
pessoas<- read_spss('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav', encoding = NULL, user_na =  FALSE)
#SPSS
pessoas<- read_spss('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_spss('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
dados <- read.spss("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/international.sav")
#SPSS
pessoas<- read.sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
#SPSS
pessoas<- read_sav('http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/pessoas.sav')
install.packages('foreign')
library(foreign)
# Stata
florida <- read.dta("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/florida.dta")
tail(florida)
class(florida)
?haven
??haven# SPSS
?heaven
dados <- read.spss("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte4/international.sav")
class(dados)
head(dados)
# Criando um boxplot
boxplot(df$gdp)
df <- data.frame(dados)
# Criando um boxplot
boxplot(df$gdp)
